import logging
import yaml
#import urllib.parse as urlparse
#import os
import secrets
import asyncio

import aiogram.utils.markdown as md
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State,StatesGroup

# Errors
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated, \
    MessageToDeleteNotFound, MessageCantBeDeleted


from database import UserDatabase, ScoreLogsDatabase
import keys as kb

url = urlparse.urlparse(os.environ['DATABASE_URL'])


user_db = UserDatabase(url)
score_db = ScoreLogsDatabase(url)

with open("config.yml", "r") as stream:
    try:
        token = yaml.safe_load(stream)['TOKEN']
    except yaml.YAMLError as exception:
        logging.error(exception)

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# States
class SetScore(StatesGroup):
    token = State()
    score = State()

class DelScore(StatesGroup):
    token = State()
    score = State()

class MakeMessage(StatesGroup):
    message = State()
    isSendable = State()

class AdminDeleteForm(StatesGroup):
    token = State()

class AdminForm(StatesGroup):
    token = State()

class BalanceForm(StatesGroup):
    token = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):

    messageText = f"{md.bold('–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è üëã')}\n\n" \
                  f"–ì–æ—Ä–∏ –Ø—Å–Ω–æ \- —ç—Ç–æ –µ–∂–µ–≥–æ–¥–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –°—Ç—É–¥–ê–∫—Ç–∏–≤–∞ –ë–∏–∑–Ω–µ—Å\-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏, –ø–æ—Å–≤—è—â—ë–Ω–Ω–æ–µ –ú–∞—Å–ª–µ–Ω–∏—Ü–µ ü•û\n" \
                  f"–ö–∞–∂–¥—ã–π –≥–æ–¥ –º—ã –≥–æ—Ç–æ–≤–∏–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–±–∏—Ä–∞–µ–º—Å—è –≤–º–µ—Å—Ç–µ, —É–≥–æ—â–∞–µ–º –≥–æ—Å—Ç–µ–π –±–ª–∏–Ω–∞–º–∏, –∑–∞–ø–∏–≤–∞–µ–º –Ω–∞–ø–∏—Ç–∫–∞–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫—Ä–µ–ø–æ—Å—Ç–∏ –∏ —Ç–∞–Ω—Ü—É–µ–º –¥–æ —É—Ç—Ä–∞\n\n" \
                  f"{md.bold('–¢—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É? üßê')}"

    await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.start_game_btn)

@dp.message_handler(Text(equals='–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é üìñ', ignore_case=True))
@dp.message_handler(commands=['menu'])
async def menu_update(message: types.Message):
    if user_db.isAdmin(message.from_user.id):
        await message.answer(md.bold("–¢–≤–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ ü•¥"), parse_mode=ParseMode.MARKDOWN_V2,
                             reply_markup=kb.admin_menu)
    else:
        await message.answer(md.bold("–¢–≤–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ ü•¥"), parse_mode=ParseMode.MARKDOWN_V2,
                             reply_markup=kb.player_menu)

async def generate_key():
    return secrets.token_hex(3)

@dp.callback_query_handler(text=['start_game'])
async def cmd_start_game(query: types.CallbackQuery):
    username = query.from_user.username if query.from_user.username is not None else 'None'
    token = await generate_key()


    if user_db.user_exists(query.from_user.id):
        user_db.update_user(user_bot_id=query.from_user.id, username=username)
        token = user_db.get_token(user_bot_id=query.from_user.id)[0]
    else:
        while not user_db.valid_token(token):
            token = await generate_key()

        user_db.add_user(user_bot_id=query.from_user.id, token=token, username=username)

    messageText = f"{md.italic('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è, —Ç—ã –≤ –∏–≥—Ä–µ ü§™!')}\n\n" \
                  f"{md.italic('–¢–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Ç–æ–∫–µ–Ω üìá:')} {md.bold(token)}"

    try:
        await bot.send_message(query.from_user.id, messageText, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.player_menu)
    except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
        logging.error(exception)


@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), Text(equals='–£–∑–Ω–∞—Ç—å —Ç–æ–∫–µ–Ω üìá', ignore_case=True))
@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), commands=['token'])
async def get_token(message: types.Message):
    token = user_db.get_token(user_bot_id=message.from_user.id)[0]

    try:
        await message.answer(f"{md.italic('–¢–≤–æ–π —Ç–æ–∫–µ–Ω üìá:')} {md.bold(token)} ", parse_mode=ParseMode.MARKDOWN_V2)
    except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
        logging.error(exception)


@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), Text(equals='–ë–∞–ª–∞–Ω—Å üí∞', ignore_case=True))
@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), commands=['getscore'])
async def get_score(message: types.Message):
    score = user_db.get_score_by_user_bot_id(user_bot_id=message.from_user.id)

    try:
        await message.answer(f"{md.italic('–¢–≤–æ–π –±–∞–ª–∞–Ω—Å üí∞:')} {md.bold(score)} –æ—á–∫–æ–≤", parse_mode=ParseMode.MARKDOWN_V2)
    except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
        logging.error(exception)

""" Rating """
@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), Text(equals='–†–µ–π—Ç–∏–Ω–≥ üèÜ', ignore_case=True))
@dp.message_handler(lambda message: user_db.user_exists(message.from_user.id), commands=['rating'])
async def get_rating(message: types.Message):
    allPlayers = sorted(user_db.get_all_players(), key=lambda i: i[2], reverse=True)

    messageText = f"{md.bold('üèÜ –†–µ–π—Ç–∏–Ω–≥ –ì–æ—Ä–∏ –Ø—Å–Ω–æ 2023:')}\n\n"

    for _ in range(0,10):
        try:
            messageText += f"{md.italic(str(_+1)+')')} {md.bold(allPlayers[_][1])} \- {md.italic(allPlayers[_][2])} üí∞\n"
        except IndexError as exception:
            logging.error(exception)
            break

    try:
        playerPlace = [index for (index, user_bot_id) in enumerate(allPlayers) if user_bot_id[0] == message.from_user.id][0] + 1
    except IndexError as exception:
        logging.error(exception)
        playerPlace = -1

    messageText += f"\n{md.italic('–í—ã –Ω–∞')} {md.bold(playerPlace)} {md.italic('–º–µ—Å—Ç–µ')} ü•á"

    await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2)

""" Set Balance"""
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, Text(equals='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üìà', ignore_case=True))
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, commands=['addscore'])
async def add_score(message: types.Message):
    await SetScore.token.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ üìá:"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)

# State '*' to handle all states
#@dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ ‚ùå', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await message.answer(md.bold("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ùå"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

@dp.message_handler(state=SetScore.token)
async def process_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text.lower()

        try:
            if not user_db.valid_token(data['token']):
                await message.answer(md.bold("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:"), parse_mode=ParseMode.MARKDOWN_V2,
                                     reply_markup=kb.cancel_process_score)
                await SetScore.score.set()
            else:
                await SetScore.token.set()
                await message.answer(f"{md.italic('–î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}\n{md.bold('üîÑ –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ:')}",
                                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)


@dp.message_handler(lambda message: not message.text.isdigit() or not (0 <= int(message.text) <= 1000), state=SetScore.score)
async def failed_process_set_score(message: types.Message,):
    try:
        await message.delete()
    except (MessageCantBeDeleted, MessageToDeleteNotFound) as exception:
        logging.error(exception)
    """
    If age is not a digit
    """
    messageText = f"{md.italic('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 1000!')}\n{md.bold('üí∞ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:')}"

    await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message_handler(state=SetScore.score)
async def process_score(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['score'] = int(message.text)

        finalScore = data['score'] + user_db.get_score_by_token(data['token'])
        user_bot_id_to = user_db.get_user_bot_id(data['token'])

        user_db.set_score(token=data['token'], score=finalScore)
        score_db.create_log(message.from_user.id, user_bot_id_to, data['score'])

        try:
            await bot.send_message(user_bot_id_to, f"{md.italic('–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ')} {md.bold(data['score'])} {md.italic('–±–∞–ª–ª–æ–≤.')}\n\n"
                                                   f"{md.italic('–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:')} {md.bold(finalScore)} {md.italic('–±–∞–ª–ª–æ–≤ üí∞')}",
                                   parse_mode=ParseMode.MARKDOWN_V2)

            await message.answer(md.bold("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω ‚úÖ"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)

    await state.finish()


""" Create Message """
@dp.message_handler(lambda message: message.from_user.id in [331603730, 754913814, 970546274], commands=['message'])
async def create_message(message: types.Message):
    await MakeMessage.message.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"), parse_mode=ParseMode.MARKDOWN_V2,
                         reply_markup=kb.cancel_process_score)

@dp.message_handler(state=MakeMessage.message)
async def process_create_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = f"{md.text(message.text)}\n\n" \
                          f"{md.italic('–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á,')}\n{md.italic('–í–∞—à –°—Ç—É–¥–ê–∫—Ç–∏–≤ –ë–ò ‚ù§Ô∏è')}"

        await MakeMessage.isSendable.set()
        await message.answer(f"{md.italic('–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ')}\n\n{md.text(data['message'])}\n\n{md.italic('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?')}",
                             parse_mode=ParseMode.MARKDOWN, reply_markup=kb.isSendableBtns)




@dp.callback_query_handler(state=MakeMessage.isSendable, text=['send_btn', 'not_send_btn'])
async def process_send_message(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['isSendable'] = query.data

        if data['isSendable'] == 'send_btn':
            users = user_db.get_all_players()

            for _ in users:
                try:
                    await bot.send_message(_[0], data['message'], parse_mode=ParseMode.MARKDOWN)
                    await asyncio.sleep(1)
                except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
                    logging.error(exception)
                    pass

            await state.finish()
            await bot.send_message(query.from_user.id, md.bold('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚úÖ'),
                                 parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)
        else:
            await state.finish()
            await bot.send_message(query.from_user.id, md.bold("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω ‚ùå"), parse_mode=ParseMode.MARKDOWN_V2,
                                 reply_markup=kb.admin_menu)


""" Delete admin """
@dp.message_handler(lambda message: message.from_user.id in [331603730, 754913814, 970546274], commands=['delete'])
async def delete_admin(message: types.Message):
    await AdminDeleteForm.token.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ üìá:"), parse_mode=ParseMode.MARKDOWN_V2,
                         reply_markup=kb.cancel_process_score)

@dp.message_handler(state=AdminDeleteForm.token)
async def process_delete_admin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text.lower()

        try:
            if not user_db.valid_token(data['token']):
                user_db.deladmin(data['token'])
                await message.answer(md.bold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ'),
                                     parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

                await bot.send_message(user_db.get_user_bot_id(data['token']), f"{md.bold('–£ –≤–∞—Å –æ—Ç–Ω—è–ª–∏ –∞–¥–º–∏–Ω–∫—É ü§î')}",
                                       parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

                await state.finish()
            else:
                await AdminDeleteForm.token.set()
                await message.answer(
                    f"{md.italic('–î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}\n{md.bold('üîÑ –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ:')}",
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)


""" Check Player Balance"""
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, Text(equals='–£–∑–Ω–∞—Ç—å —á—É–∂–æ–π –±–∞–ª–∞–Ω—Å üîç', ignore_case=True))
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, commands=['getscore'])
async def check_balance(message: types.Message):
    await BalanceForm.token.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ üìá:"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)

@dp.message_handler(state=BalanceForm.token)
async def process_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text.lower()

        try:
            if not user_db.valid_token(data['token']):

                messageText = f"{md.italic('–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞')} {md.quote_html(data['token'])}: " \
                              f"{md.bold(user_db.get_score_by_token(data['token']))} üí∞"
                await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

                await state.finish()
            else:
                await BalanceForm.token.set()
                await message.answer(
                    f"{md.italic('–î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}\n{md.bold('üîÑ –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ:')}",
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)

""" Make admin process """
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, Text(equals='–î–∞—Ç—å –∞–¥–º–∏–Ω–∫—É ‚öñÔ∏è', ignore_case=True))
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True , commands=['makeadmin'])
async def process_makeadmin(message: types.Message):
    await AdminForm.token.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ üìá:"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)

@dp.message_handler(state=AdminForm.token)
async def process_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text.lower()

        try:
            if not user_db.valid_token(data['token']):
                user_db.makeadmin(data['token'], message.from_user.id)
                await message.answer(md.bold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ'),
                                     parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

                await bot.send_message(user_db.get_user_bot_id(data['token']), f"{md.bold('–í–∞—Å —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º üòé')}",
                                       parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)

                await state.finish()
            else:
                await AdminForm.token.set()
                await message.answer(
                    f"{md.italic('–î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}\n{md.bold('üîÑ –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ:')}",
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)



""" Delete balance """
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, Text(equals='–£–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å üìâ', ignore_case=True))
@dp.message_handler(lambda message: user_db.isAdmin(message.from_user.id) is True, commands=['delscore'])
async def del_score(message: types.Message):
    await DelScore.token.set()
    await message.answer(md.bold("–í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –∏–≥—Ä–æ–∫–∞ üìá:"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)

@dp.message_handler(state=DelScore.token)
async def process_del_token(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['token'] = message.text.lower()

        try:
            if not user_db.valid_token(data['token']):
                await message.answer(md.bold("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:"), parse_mode=ParseMode.MARKDOWN_V2,
                                     reply_markup=kb.cancel_process_score)
                await DelScore.score.set()
            else:
                await DelScore.token.set()
                await message.answer(f"{md.italic('–î–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}\n{md.bold('üîÑ –í–≤–µ–¥–∏ —Ç–æ–∫–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ:')}",
                    parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.cancel_process_score)
        except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
            logging.error(exception)


@dp.message_handler(lambda message: not message.text.isdigit() or not (0 <= int(message.text) <= 1000), state=DelScore.score)
async def failed_process_del_score(message: types.Message,):
    try:
        await message.delete()
    except (MessageCantBeDeleted, MessageToDeleteNotFound) as exception:
        logging.error(exception)
    """
    If age is not a digit
    """
    messageText = f"{md.italic('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 1000!')}\n{md.bold('üí∞ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:')}"

    await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message_handler(state=DelScore.score)
async def process_del_score(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['score'] = int(message.text)

        availableTokens = user_db.get_score_by_token(data['token'])

        if availableTokens - data['score'] < 0:
            await DelScore.score.set()

            messageText = f"{md.italic('–î–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–Ω—è—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!')}\n" \
                          f"{md.italic('üí∞ –í–≤–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–Ω—è—Ç–∏—è: ')} {md.bold(availableTokens)} {md.italic('–±–∞–ª–ª–æ–≤.')}"
            await message.answer(messageText, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            score = availableTokens-data['score']
            user_bot_id_to = user_db.get_user_bot_id(data['token'])

            user_db.set_score(token=data['token'], score=score)
            score_db.create_log(message.from_user.id, user_bot_id_to, -data['score'])

            try:
                await bot.send_message(user_bot_id_to,
                                       f"{md.italic('–° —Ç–µ–±—è —Å–Ω—è—Ç–æ')} {md.bold(data['score'])} {md.italic('–±–∞–ª–ª–æ–≤.')}\n\n"
                                       f"{md.italic('–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:')} {md.bold(score)} {md.italic('–±–∞–ª–ª–æ–≤ üí∞')}",
                                       parse_mode=ParseMode.MARKDOWN_V2)

                await message.answer(md.bold("–ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω ‚úÖ"), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=kb.admin_menu)
            except (BotBlocked, ChatNotFound, UserDeactivated) as exception:
                logging.error(exception)

            await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)